?
include("testJulia3.jl")
import Pkg; Pkg.add("matplotlib")
exit()
import Pkg; Pkg.add("matplotlib")
include("testJulia3.jl")
include("testJulia3.jl")
exit()
include("testJulia3.jl")
include("testJulia3.jl")
exit()
plot(tree)
plot(tree)
tree
using Pkg
Pkg.add("KissABC.jl")
using Pkg
Pkg.add("KissABC")
exit()
include("testJulia3.jl")
import Pkg; Pkg.add("KissABC")
include("testJulia3.jl")
include("testJulia3.jl")
exit()
ones(5)
1
xo
x0
1-x0
ones(4) - x0
ones(4)' - x0
ones(4) - x0'
ones(4)
x0
length(x0)
ones(length(x0))
mat
x0
eye(5)
I(5)
?"Identity"
u\
 x0
x0
ones(4)
ones(4) - x0
exit()
<<<<<<< Updated upstream
testbranches
length(testbranches)
testbranches
last(mat)
mat
textbranches[1]
testbranches[1]
tbr <- first(testbranches)
nodes = getnoeds(test)
nodes = getnodes(test)
nodes
gettips(test)
collect(nodeiter(test))
test2 = collect(nodeiter(test))
test2
length(test2)
test2[1].u
test2.data
test2[1].data
test2.data["1"].u
testbranches[1].data["1"].u
testbranches[1].data
testbranches[1].data.u
testbranches[1].data[1]
testbranches[1].data[1, 2]
nodenamefilter(test)
nodenamefilter(istip, test)
nodenamefilter(isroot, test)
test
collect(testbranches)
collect(testbranches)[1]
plot(tree)
tree
tree.names
collect(testbranches)[1]
getleafnames(test)
getlength(test)
getlength(tree)
collect(getnodes(test), isleaf)
nodefilter(test, isleaf)
nodefilter(isleaf, test)
collect(nodefilter(isleaf, test))
test3 = collect(nodefilter(isleaf, test))
test3 = collect(nodefilter(isleaf, test));
dim(test3)
dims(test3)
test3
test3[1]
length(test3[1])
test3[1]
testbranches = getbranches(test)
testbranches = getbranches(test);
nodefilter(test)
nodefilter(isleaf, test)
tst2 = nodefilter(isleaf, test);
tst2[1]
tst2 = collect(nodefilter(isleaf, test));
tst[1]
tst2[1]
testtips.data
testtips[1].data
tbr[1]
tbr[1].data
tbr[1].data["1"].u
last(tbr[1].data["1"].u)
tbr[1].data["1"].u[4]
tbr[1].data["1"].u[4,]
tbr[1].data["1"].u
tbr[1].data["1"].t
tbr[3].data["1"].t
tbr[3].data["1"].u
tbr[3].data["1"].u[3]
tbr[5].data["1"].u[3]
last(tbr[5].data["1"].u, 1)
testtips[1]
testtips[1].branch
testtips[1].incoming
fields(testtips[1])
fieldnames(testtips[1])
fieldnames(test)
fieldnames(tbr[1])
typeof(testtips[1])
testtips[1].branch
fieldnames(typeof(testtips[1]))
testtips[1].inbound
testtips[1].inbound.u
testtips[1].inbound
testtips[1].inbound.data
testtips[1].inbound.data["1"].u
testtips[1].inbound.data["1"].u
res
a = Vector(Float64, 3)
a = Vector{Float64, 3}
a = Vector{Float64}
a[1] = .39587
a
a[]
myvec = a[1:10]
res[1]
res[1:3] = [.3534 .35454 .354]
C = Array{Float64}[] 
C = Array{Float64, 4}[] 
C[1] = [239874 23487 34587987]
C[1] = [239874, 23487, 34587987]
C = Array{Float64, undef, 0, 0}
C = Array{Float64}(undef, 0, 0}
C = Array{Float64}(undef, 0, 0)
C = Array{Float64}(undef, 15, 1)
C[1] = [234 432 213 123]
C = Array{Matrix{Float64}}}(undef, 15, 1)
C = Array{Matrix{Float64}}(undef, 15, 1)
C[1] = [243 24 25 123]
C
length(testtips)
length(res)
length(res)
res[1]
res[1,1]
typof(res)
typeof(res)
C = Array{Matrix{Float64}}(undef, 15, 1)
C[1]
C[1,1]
C(1,1)
C[1]
C[,1]
C[:1]
C = Array{Matrix{Float64}}[undef, 15, 1]
C = Array{Matrix{Float64}}(undef, 15, 1)
C[1] = .4
C[1] = [.3 .4]
C[2] = [.3 .4]
C[2] = [.3 .4, .3]
C[2] = [.3 .4 .3]
C
length(testtips)
finaltraitvals
finaltraitvals'
as.matrix(final.traitvals)
[finaltraitvals]
typeof(finaltraitvals)
res
res
fieldnames(testtips[1])
fieldnames(testtips)
fieldnames(typeof(testtips))
fieldnames(typeof(testbranches))
testbranches.x
test.branches.x[3]
test.branches[3].x
fieldnames(typeof(testbranches))
testbranches.x
testbranches.x[1]
[100]
testbranches.x[100]
testbranches.x[394]
fieldnames(typeof(testtips))
fieldnames(typeof(testtips[1]))
testtips[1].name
res
tipnames
tipnames[1] = "i"
tipnames
tipnames
Array()
vcat(res, tipnames)
hcat(res, tipnames)
endtraits["tip 1"]
mydict
tipnames
res
mydict
mydict["tip 4"]
tipnames[4]
res[4]
res
 testtips[1].inbound.data["1"].t[end]
 testtips[1].inbound.data["1"].t[end]
finaltipnames
finaltraitvals
finaltraitvals
finaltraitvals
finaltraitvals
testtips[1].height
fieldnames(typeof(testtips[1]))
testtips[1].inbound.data["1"].t[end]
 testtips[i].inbound.data["1"].t[end]
 testtips[1].inbound.data["1"].t[end]
i = 1
 testtips[1].inbound.data["1"].t[end]
typeof(tiptimes)
typeof(testtips[i].inbound.data["1"].t[end])
finaltraitvals
tiptimes
tiptimesdict
tiptimesdict[1]
exit()
ls()
ls
list()
list.files()
Pkg.add("Distances") #if you don't have it
using Distances
y
euclidean(rand(10), rand(10))
finaltraitvals
tipnamesdict
tiptimesdict
keys(tiptimesdict)
valuestiptimesdict
values(tiptimesdict)
keys(finaltraitvalues)
keys(finaltraitvals)
values(finaltraitvals)
?order
res
tipnames
plot(tree)
fieldnames(typeof(tree))
testtips
tiptimes
v1 = rand(4)
v2 = rand(4)
euclidean(v1, v2)
squaredeuclidean(v1, v2)
euclidean(v1, v2)
 collect(Iterators.flatten(Iterators.flatten(finaltraitvals)))
 collect(Iterators.flatten(Iterators.flatten(res)))
vals
vals = rand(400)
euclidean(vals, resvalsflat)
euclidean(vals, resvalsflat)
[24, 24, 234]
[24, 24, 234]'
res
finaltraitvals
collect(Iterators.flatten(res))
mat
dim(mat)
diffusion(5, 1)
P
P
p
tree
x0
mat
tree
fieldnames(typeof(tree))
tree.tipdata
getheight(tree)
tree
getheight(tree, node.)))
diffusion(x0, tspand)
diffusion(x0, tspan)
test
menura(tree, x0, mat)
predictTraitTree(tree, x0, mat)
tree
x0
mat
tiptimes
tree
remove(p)
menura(tree, x0, mat, p)
diffusion(x0, tspan, mat, p)
diffusion(x0, tspan, mat, p)
x0
tspan
mat
p
diffusion(x0, tspan, p)
menura(tree)
tree
simulation(x0, mat, tspan, p)
simulation(x0, mat, tspan, p)
x0
mat
p
tree
x0
mat
p
simulation(x0, mat, tspan, p)
p
x0
simulation(x0, mat, tspan, p)
ones(5)
simulation(x0, mat, tspan, p)
p[1]
simulation(x0, mat, tspan, p)
diffusion(x0, tspan, p)
diffusion(x0, tspan, p)
simulation(x0, mat, tspan, p)
test = simulation(x0, mat, tspan, p)
test = simulation(x0, mat, tspan, p)
test = simulation(x0, mat, tspan, p)
test = simulation(x0, mat, tspan, p)
test = simulation(x0, mat, tspan, p)
test = simulation(x0, mat, tspan, p)
test = simulation(x0, mat, tspan, p)
test = simulation(x0, mat, tspan, p)
test = simulation(x0, mat, tspan, p)
test = simulation(x0, mat, tspan, p)
test = simulation(x0, mat, tspan, p)
test = simulation(x0, mat, tspan, p)
test = simulation(x0, mat, tspan, p)
test = simulation(x0, mat, tspan, p)
test = simulation(x0, mat, tspan, p)
round(-0.00006)
abs(-.4)
test = simulation(x0, mat, tspan, p)
test = simulation(x0, mat, tspan, p)
test = simulation(x0, mat, tspan, p)
test = simulation(x0, mat, tspan, p)
test = simulation(x0, mat, tspan, p)
test = simulation(x0, mat, tspan, p)
test = simulation(x0, mat, tspan, p)
test = simulation(x0, mat, tspan, p)
test = simulation(x0, mat, tspan, p)
test = simulation(x0, mat, tspan, p)
test = simulation(x0, mat, tspan, p)
test = simulation(x0, mat, tspan, p)
test = simulation(x0, mat, tspan, p)
test = simulation(x0, mat, tspan, p)
diffusion(x0, tspan, p)
diffusion(x0, (0.0, 10.0), p)
diffusion(x0, (0.0, 10.0), p)
diffusion(x0, (0.0, 10.0), p)
diffusion(x0, (0.0, 10.0), p)
diffusion(x0, (0.0, 10.0), p)
diffusion(x0, (0.0, 10.0), p)
diffusion(x0, (0.0, 10.0), p)
diffusion(x0, (0.0, 10.0), p)
diffusion(x0, (0.0, 10.0), p)
diffusion(x0, (0.0, 10.0), p)
diffusion(x0, (0.0, 10.0), p)
diffusion(x0, (0.0, 10.0), p)
diffusion(x0, (0.0, 10.0), p)
diffusion(x0, (0.0, 10.0), p)
diffusion(x0, (0.0, 10.0), p)
diag(4)
I
using LinearAlgebra
I
I[4,4]
I
test = simulation(x0, mat, tspan, p)
I
I3.5
0.5I
test = simulation(x0, mat, tspan, p)
diffusion(x0, (0.0, 10.0), p)
diffusion(x0, (0.0, 10.0), p)
diffusion(x0, (0.0, 10.0), p)
diffusion(x0, (0.0, 10.0), p)
diffusion(x0, (0.0, 10.0), p)
diffusion(x0, (0.0, 10.0), p)
diffusion(x0, (0.0, 10.0), p)
diffusion(x0, (0.0, 10.0), p)
diffusion(x0, (0.0, 10.0), p)
diffusion(x0, (0.0, 10.0), p)
diffusion(x0, (0.0, 10.0), p)
diffusion(x0, (0.0, 10.0), p)
diffusion(x0, (0.0, 10.0), p)
diffusion(x0, (0.0, 10.0), p)
diffusion(x0, (0.0, 10.0), p)
diffusion(x0, (0.0, 10.0), p)
diffusion(x0, (0.0, 10.0), p)
diffusion(x0, (0.0, 10.0), p)
diffusion(x0, (0.0, 10.0), p)
diffusion(x0, (0.0, 10.0), p)
diffusion(x0, (0.0, 10.0), p)
diffusion(x0, (0.0, 100.0), p)
diffusion(x0, (0.0, 100.0), p)
diffusion(x0, (0.0, 100.0), p)
diffusion(x0, (0.0, 100.0), p)
diffusion(x0, (0.0, 100.0), p)
sigma
sigma_vec
diffusion(x0, (0.0, 100.0), p)
diffusion(x0, (0.0, 100.0), p)
diffusion(x0, (0.0, 100.0), p)
diffusion(x0, (0.0, 100.0), p)
diffusion(x0, (0.0, 100.0), p)
round(-0.00001)
sqrt(round(-0.00001))
diffusion(x0, (0.0, 100.0), p)
test = simulation(x0, mat, tspan, p)
test = simulation(x0, mat, tspan, p)
test = simulation(x0, mat, (0.0, 100.0), p)
test = simulation(x0, mat, (0.0, 100.0), p)
tspan
tspan
plot(tree)
tree.plot
fieldnames(typeof(tree))
tree.data
tree.tipdata
tree.nodes
?"Ultrametric"
plot(tr)
Exponential(3)
exp(23)
heights(test)
tree
heights(tree)
using Phylo;
height(tree)
height(tr)
tree.heightstoRoot
tree.heightstotoot
tree.heightstoroot
heightstoroot(tree)
heightstoroot(tree)
heightstoroot(tree).x
heightstoroot(tree).x
heightstoroot(tree)
tst = heightstoroot(tree)
test
tst
tst.x
fieldnames(typeof(tst))
tst.data
tst.axes
tst.axes[1]
tst.axes[1][1]
tst.data[1][1]
tst.data[1]
tst.data
include("testJulia3.jl")
include("testJulia3.jl")
exit()
include("testJulia3.jl")
whos()
whos()
whos()
using JLD2
include("testJulia3.jl")
whos()
who()
whos
include("testJulia3.jl")
varinfo()
@save "test.jld"
exit()
using JLD2
@load "test.jld"
include("testJulia3.jl")
varinfo()
@save "test.jld"
exit()
using JLD2
@load "test.jld"
=======
exit()
>>>>>>> Stashed changes
