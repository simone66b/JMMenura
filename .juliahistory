      q₀ = [1., 1.]
      λ  = 2.
      μ  = 1.
      p = (λ=λ, μ=μ)
  
      sde = SDE(v, B, t₀, q₀; parameters=p)
using GeometricIntegrators
p
sde
ode = ODE((t, x, ẋ) -> ẋ[1] = x[1], [1.0]);
int = Integrator(ode, TableauExplicitEuler(), 0.1);
sol = integrate(ode, int, 10);
exit()
exit()
eigen(P0)
eigen(P0)
Y = P0
Z = [3 .1; .1 3]
LB(P0, Z)
P0*Z
Z*P0
LB(Z, P0)
exit()
fields(typeof(P0S)
)
methods(typeof(P0S)
)
P0S.Schur
P0S.vectors
sqrt(2)
1/.70107
1/sqrt(2)
A
1 .* .01 .* A
B
G
2 * G
G
diffusion(1, 1, .01)
?SDEProblem
p
p(1)
G
G
[0.0 -0.4994999999999997; 0.4994999999999997 0.0]
schur(G)
schur( [0.0 -0.4994999999999997; 0.4994999999999997 0.0])
 [0.0 -0.4994999999999997; 0.4994999999999997 0.0]
G
exit()
eigen(iris)
sol
sol
sol.u
sol.u[last]
sol.u[1001]
eigen(sol.u[1001])
import Pkg; Pkg.add("ExponentialUtiities")
import Pkg; Pkg.add("ExponentialUtiities")
sol
last
sol.u[1001]
eigen(result)
Omega1
Omega2
First
Second
Omega2
Omega1
eigen(result)
eigen(iris)
schur(iris)
eigen(result)
exit()
using Statistics
?correlation
using Statistics
cor(result)
cor(results)
cor(result)
cor(iris)
iris
cor(iris)
cor(result)
iris
cor(result)
cor(iris)
cor(iris)
cor(iris)
exit()
  C-c C-cERROR: 
exit()
res
exampledat
plot(res)
typeof(res)
res
prsample=[rand(prior) for i in 1:5000] 
prsample=[rand(priors) for i in 1:5000] 
plot(prsample)
prsample
priors
exampledat
y
gen_cov_mat(p)
gen_cov_mat(p)
sol.u
p
p
cor(p[2])
cor(p[4])
gen_cov_mat(p)
gen_cov_mat(p)
gen_cov_mat(p)
gen_cov_mat(p)
gen_cov_mat(p)
eigen(gen_cov_mat(p))
eigen(gen_cov_mat(p))
eigen(gen_cov_mat(p))
eigen(gen_cov_mat(p))
eigen(gen_cov_mat(p))
eigen(gen_cov_mat(p))
eigen(gen_cov_mat(p))
eigen(gen_cov_mat(p))
eigen(gen_cov_mat(p))
eigen(gen_cov_mat(p))
eigen(gen_cov_mat(p))
eigen(gen_cov_mat(p))
eigen(gen_cov_mat(p))
eigen(gen_cov_mat(p))
p
eigen(gen_cov_mat(p))
p
eigen(p[4])
cor(p[4])
p[4]
p[4]
cor(p[4])
cor(p[4]) 
cor(gen_cov_mat(p))
gen_cov_mat(p)
p
gen_cov_mat(p[4])
p
p[4]
P0
gen_cov_mat(p[4])
using ExponentialUtilities
gen_cov_mat(p[4])
p[4]
cor(p[4])
gen_cov_mat(p[4])
schur(p[4])
schur(p[4]).vector
schur(p[4]).vectors
gen_cov_mat(p[4])
schur(p[4])
schur(p[4]).vectors
gen_cov_mat(p)
cor(p[4])
gen_cov_mat(P0)
gen_cov_mat(p[4])
p
gen_cov_mat(p)
gen_cov_mat(p)
gen_cov_mat(p)
gen_cov_mat(p)
gen_cov_mat(p)
gen_cov_mat(p)
gen_cov_mat(p)
gen_cov_mat(p)
gen_cov_mat(p)
gen_cov_mat(p)
p[4]
result
sol
p[4]
last(sol.u)
result
sol
A
B
P0
gen_cov_mat(p)
P0
gen_cov_mat(p)
gen_cov_mat(p)
gen_cov_mat(p)
eigen(gen_cov_mat(p))
A
B
Omega1
p[4]
sol
a
p
prob
P0
u0
last(sol.u)
sol.u[1001]
exit()
eigen(A * iris * A')
eigen(iris)
sol
det. sol.u
?det
.det(sol.u)
det.(sol.u)
plot(det.(sol.u))
using Plots; pyplot();
plot(det.(sol.u))
schur(iris)
-A
A'
sol = solve(prob,EM(), p=p, dt=0.001); ## Solve using E-M scheme
p
t=1
 2.0 * t .* B 
plot(det.(sol.u))
?schur
A * schur(iris).F * A'
A * schur(iris).Schur * A'
iris
-A
A'
A * schur(iris).Schur * A'
iris
mat = [0, -1, -1, -1;
A'
-A
exit()
-A
A'
-A
A'
T
A
iris
1/2*(iris - iris')
1/2*(iris + iris')
iris
iris
iris
-A
A'
-A'
A
A
iris
-iris
iris'
iris
iris
diag(iris)
diag!(iris) = 0
diag(iris)
Diagonal(iris)
iris
-iris
iris'
p
-A == A'
iris == result
result
iris
eigen(result)
eigen(iris)
eigen(result).vectors == eigen(iris).vectors
-A == A'
u0 = zeros(4)
  C-c C-c  C-c C-c
eigen(iris)
First
Second
last(sol.u)
sol.u
sol.u
sol.u
sol.u
sol.u
sol.u
sol.u
sol.u
sol.u
using SimpleDiff
import Pkg; Pkg.add("SimpleDiff")
using SimpleDiffEq
using SimpleDiffEq
sol.u
sol.u
sol.u
sol
prob
p
last(sol.u)
sol
sol
sol
sol.u
p
sol
result
iris
last(sol.u)
sol.u
sol.u
drift
diffusion
exit()
sol.u
p
sol.u
u0
drift
p.A
p.B
typeof(p.B)
p
u0
prob
prob
u0
prob
prob
p
A, B = p
A
B
sol
sol.u
sol.u
sol.u
prob
u0
sol.u
sol
sol
exit()
inverse(mm)
inv(mm)
p
u0
drift
diffusion
sol = solve(prob, EM(), p=p, dt=0.001); ## Solve using E-M scheme NOT WORKING!
sol.u
sol.u
solve(prob)
mm
mm
ones(4)
sol.u
sol.u
 [0.0 0.8599378479858834; -0.7310670615049639 0.0]'
- [0.0 0.8599378479858834; -0.7310670615049639 0.0]
 [0.0 0.8599378479858834; -0.7310670615049639 0.0]
- [0.0 0.8599378479858834; -0.7310670615049639 0.0]
zz =  [0.0 0.8599378479858834; -0.7310670615049639 0.0]
-zz == zz'
zz
zz'
-zz
zz'== zz
inv(mm)
sol.u
tst = last(sol.u)
-tst == tst'
sol.u
zz = last(sol.u)
zz' == -zz
zz = [0 1; -1 0]
-zz == zz'
zz = last(sol.u)
-zz == z'
-zz == zz'
tspan
sol.u
zz = last(sol.u)
- zz == zz'
sol.u
zz = last(sol.u)
- zz == zz'
sol.u
zz = last(sol.u)
- zz == zz'
zz = last(sol.u)
- zz == zz'
sol.u
identity(4)
id(5)
sol.u
sol.u
zz = last(sol.u)
-zz=zz'
-zz==zz'
zz
sol.u
zz = last(sol.u)
-zz==zz'
zz = exponential!(last(sol.u))
-zz = zz'
zz = last(sol.u)
-zz == zz'
sol.u
sol.u
zz = last(sol.u)
-zz = zz'
-zz == zz'
zz
-zz
zz'
zeros(2,2)
MM
MM
-MM == MM'
round(zz)
zz
zz[1,1] = zz[4,4] = 0.0
zz[1,1] = 0.0
zz[4,4] = 0.0
zz[2,2] = 0.0
zz
zz'
-zz
MM' == -MM
sol
exponential!(zz)
zz
-zz = zz'
-zz == zz'
sol.u
G =  [0  0.0424340    -1.2743154   -0.5162707;
         -0.0424340   0   0.3296564  0.1216394;
         1.2743154  -0.3296564    0   -1.2956094;
         0.5162707  -0.1216394    1.2956094   0];
  C-c C-c  C-c C-c
G =  [0  0.0424340    -1.2743154   -0.5162707;
         -0.0424340   0   0.3296564  0.1216394;
         1.2743154  -0.3296564    0   -1.2956094;
         0.5162707  -0.1216394    1.2956094   0];
-G == G'
last(sol.u)
zz = last(sol.u)
-zz == zz'
result
eigen(result)
Omega1
p
-p.A == p.A'
-p.B == p.B'
Omega1
Omega1
Omega1
last(sol.u)
Omega1
Omega2
Omega1
Omega2
Omega1
Omega1
Omega2
First
Second
Omega1
Omega2
last(sol.u)
Omega1
Omega2
eigen(result).values
result
eigen(result)
eigen(iris)
Omega1
Omega1
Omega2neg
First
Second
result
result
iris
cor(iris)
cor(result)
result
iris
exit()
exit()
result
First
import Pkg; Pkg.add("ExponentialUtilities")
iris
UpperTriangular(iris)
-UpperTriangular(iris)
triang = -UpperTriangular(iris)
lowrtri = LowerTriangular(iris)
iris
trian + lowrtri
triang + lowrtri
p = iris
exit()
