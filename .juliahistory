sol.u
tst = last(sol.u)
-tst == tst'
sol.u
zz = last(sol.u)
zz' == -zz
zz = [0 1; -1 0]
-zz == zz'
zz = last(sol.u)
-zz == z'
-zz == zz'
tspan
sol.u
zz = last(sol.u)
- zz == zz'
sol.u
zz = last(sol.u)
- zz == zz'
sol.u
zz = last(sol.u)
- zz == zz'
zz = last(sol.u)
- zz == zz'
sol.u
identity(4)
id(5)
sol.u
sol.u
zz = last(sol.u)
-zz=zz'
-zz==zz'
zz
sol.u
zz = last(sol.u)
-zz==zz'
zz = exponential!(last(sol.u))
-zz = zz'
zz = last(sol.u)
-zz == zz'
sol.u
sol.u
zz = last(sol.u)
-zz = zz'
-zz == zz'
zz
-zz
zz'
zeros(2,2)
MM
MM
-MM == MM'
round(zz)
zz
zz[1,1] = zz[4,4] = 0.0
zz[1,1] = 0.0
zz[4,4] = 0.0
zz[2,2] = 0.0
zz
zz'
-zz
MM' == -MM
sol
exponential!(zz)
zz
-zz = zz'
-zz == zz'
sol.u
G =  [0  0.0424340    -1.2743154   -0.5162707;
         -0.0424340   0   0.3296564  0.1216394;
         1.2743154  -0.3296564    0   -1.2956094;
         0.5162707  -0.1216394    1.2956094   0];
  C-c C-c  C-c C-c
G =  [0  0.0424340    -1.2743154   -0.5162707;
         -0.0424340   0   0.3296564  0.1216394;
         1.2743154  -0.3296564    0   -1.2956094;
         0.5162707  -0.1216394    1.2956094   0];
-G == G'
last(sol.u)
zz = last(sol.u)
-zz == zz'
result
eigen(result)
Omega1
p
-p.A == p.A'
-p.B == p.B'
Omega1
Omega1
Omega1
last(sol.u)
Omega1
Omega2
Omega1
Omega2
Omega1
Omega1
Omega2
First
Second
Omega1
Omega2
last(sol.u)
Omega1
Omega2
eigen(result).values
result
eigen(result)
eigen(iris)
Omega1
Omega1
Omega2neg
First
Second
result
result
iris
cor(iris)
cor(result)
result
iris
exit()
exit()
result
First
import Pkg; Pkg.add("ExponentialUtilities")
iris
UpperTriangular(iris)
-UpperTriangular(iris)
triang = -UpperTriangular(iris)
lowrtri = LowerTriangular(iris)
iris
trian + lowrtri
triang + lowrtri
p = iris
exit()
ls()
size(iris)
size(iris)[1]
p = iris
u0
p
dt = 0.001
eigen(p).values
p
eigen(iris).values
result
iris
exit()
p.alpha1
p.mu1
p.mat
end
iris
P0
gen_cov_mat(P0, (0.0, 1.0))
p
gen_cov_mat(p, (0.0, 1.0))
eigen(p0)
eigen(P0)
eigen(gen_cov_mat(p, (0.0, 1.0)))
gen_cov_mat(p, tspan, u0 = 1)
gen_cov_mat(p, tspan)
gen_cov_mat(p, tspan)
gen_cov_mat(p, tspan)
gen_cov_mat(p, tspan)
iris
P0
dt = 0.001
eigen(result)
eigen(P0)
result
iris = P0
P0 = result
p.mat
sol.u
last(sol.u)
last(sol.u)
last(sol.u)
First
Second
last(sol.u)
sol.u[1]
[1000]
sol.u[1000]
sol.u[10]
eigen(result)
u0
dt
dt = 0.0001
p.mat = result
sol.u
dt
First
Second
P0
result
eigen(result)
exit()
gen_cov_mat(p, tspan)
p
p.a1
u0 = zeros(4,4)
dt = 0.001
gen_cov_mat(p, tspan)
gen_cov_mat(p, tspan)
gen_cov_mat(p, tspan)
gen_cov_mat(p, tspan)
p.mat
First
Second
pp.A
pp.B
pp.a1
pp.b1
gen_cov_mat(p, tspan)
gen_cov_mat(p, tspan)
gen_cov_mat(p, tspan)
tst = gen_cov_mat(p, tspan)
eigen(tst)
eigen(iris)
p.mat
exit()
tst = gen_cov_mat(p, tspan)
eigen(tst)
eigen(P0)
tst = gen_cov_mat(p, tspan)
tst = gen_cov_mat(p, (0, 10))
eigen(tst)
cor(tst)
cor(P0)
tst = gen_cov_mat(p, (0, 2)
)
cor(tst)
cor(P0)
det(P0)
det(tst)
tst = gen_cov_mat(p, (2, 3))
cor(tst)
cor(P0)
tst = menuramat(tr, P0)
tree.other
tree
methods(typeof(tree))
tree.inbound
ismissing(node)
tree
tree.nodes
t0=0.0
tree
tree.node
tree.nodes
tree.branches
tst = menuramat(tr, P0)
tree
getroot(tree)
get_cov_mat
tst = menuramat(tr, P0)
P0
tst = menuramat(tr, p.P0)
p
tst = menuramat(tr, p.mat)
menuramat(tree, p)
menuramat(tree, p)
Recurse!(tree, p.mat)
p
p
fields(p)
methods(p)
field(p)
fieldnames(typeof(p))
typeof(p)
typeof(p.mat)
menuramat(tree, p)
menuramat(tree, P0)
P0
p.mat
menuramat(tree, P0)
p
p.mat
iris
P0
node
node
node = getroot(tree)
i = 1
P0
t0
P0
tree
fieldnames(tree)
fieldnames(typeof(tree))
tree.data
tree.name
tree.tipdata
tree.branches
tree.data
p
putp!(tree, p, "2")
tree.data
tree.node.data
tree.node
fieldnames(typeof(tree))
tree.data
tree.nodes[1].data["2"]
node.other[i].data["2"].mat
tree.node
tree.nodes
tree.nodes[i]
tree.nodes[i].data
tree.nodes[i].data["2"]
tree.other
tree.nodes[i].other
tree.nodes[i].other.data
tree.nodes[i].data
node[i].data["2"].mat
node
node.other
node.other[1]
node.other[1].data
tree.other[1].data
node.other = tree.nodes[1]
tree.nodes
tree.nodes[1]
node = tree.nodes[1]
node.other
node.other[1]
node.other.mat
p
putp!(tree, p, "2")
tree
tree.nodes[1].data["2"]
fieldnames(typeof(tree.nodes))
tree.nodes
tree.nodes[1]
node
plot(tree)
tree.nodes[1].data["2"]
tree.inbound
tree.nodes[1].inbound
node = getroot(tree)
node.inbound
node.other
node.data["2"].mat
node.data
node.data[2].mat
node.data.mat
node
node.other
node.other[1]
node.other[1].data
node.data
node.data[2]
node.data["2"]
node.data["2"].mat
node.data["2"]
node.data["2"].mat
node.data["2"].mat
mat = node.data["2"].mat
mat
gen_cov_mat(p, (0,1.0))
node.other
node.other[1]
node.other[1].data
node.data
node.data["2"].mat
node = getroot(tree)
node.data
node.data
tree
node = getroot(tree)
node
node.data
node.other
node.other[1]
tree.nodes
tree.branches
putp!(tree, p, "2")
putp!(tree, p)
putp!(tree, p)
putp!(tree, p, "2")
node.data
node.data
 node.other[i].data["3"] 
node.other[i].data["2"]
node.other[1].data
node.other[i].data["3"]
node.data["2"]
putp!(tree, p)
putp!(tree, p, "2")
tree
tree.nodes[1].data
tree.nodes.other[1].data
tree.other[1].data
tree.nodes[1].other
tree.nodes[1].other.data
tree.nodes[1].other.data["matrix"]
tree.nodes[1].other.data
tree.nodes[1]
tree.nodes[1].other
tree.nodes[1].other.data
fieldnames(tree.nodes[1].other)
fieldnames(typeof(tree.nodes[1].other))
fieldnames(tree.branches[1])
node.branches
menuramat!(tree)
tree.other
fieldnames(typeof(tree))
tree.data
tree.branches[1].data
tree.other
fieldnames(typeof(tree))
tree.branches[1]
tree.branches
fieldnames(typeof(tree))
tree.nodes
tree.nodes[1].data
daughters(tree)
node.data
menuramat!(tree)
node = getroot(tree)
node.data
node.other
)
node.data
node.data
node.data["2"]
node.data
node.data["2"]
getheight(tree, node)
node.other[1].length
node = getroot(tree)
node.data
node.data["matrix"].left
node.data["matrix"].right
plot(tree)
node.other
node.other[1].data["matrix"]
node.data["matrix"].right
node.data["matrix"].left
node.data
node.data["matrix"].left
node.data["matrix"].right
tree
fieldnames(typeof(tree))
tree.nodes
tree.nodes[3]
tree.nodes[3].data["matrix"].left
tree.nodes[3].data
menuramat!(tree)
tree.nodes[3].data
tree
node = getroot(tree)
node.data
getnodes(tree)
tst = getnodes(tree)
tst[1].data
tst[2].data
tst[2].data["matrix"].left
tst[2].data["matrix"].right
tst[3].data["matrix"]
tst
tst[3]
tst[4]
tst[4].data
menuramat!(tree)
tst = getnodes(tree)
tst[4].data
tst[3]
tst[3].data
tst[2].data
tst[1].data
plot(tree)
length(tst)
for i in 1:9 tst[i].data
end
for i in 1:9 print(tst[i].data) end
fieldnames(typeof(tree))
tree.data
tree.nodes[1].data
tree.nodes[2].data
tree.nodes[3].data
tree.nodes[4].data
tree.nodes[5].data
tree.nodes[6].data
tree.nodes[7].data
tree.nodes[8].data
tree.nodes[9].data
tree.nodes[10].data
tree.nodes[7].data["matrix"].left
tree.nodes[7].data["matrix"].right
tree.nodes[1].data["matrix"].right
tree.nodes[2].data["matrix"].right
tree.nodes[6].data["matrix"].right
tree.nodes[6].data["matrix"].left
tree.nodes[7].data["matrix"].left
tree.nodes[7].data["matrix"].right
eigen(tree.nodes[7].data["matrix"].right)
tree.nodes[6].data["matrix"].right
tree.nodes[6].data["matrix"].left
exit()
