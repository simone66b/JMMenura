import Pkg; Pkg.add("DifferentialEquations")
import Pkg; Pkg.add("Phylo")
exit()
import Pkg; Pkg.add("Plots")
import Pkg; Pkg.add("Distributions")
import Pkg; Pkg.add("StatsPlots")
import Pkg; Pkg.add("PyPlot")`
import Pkg; Pkg.add("PyPlot")
exit()
length(mat)
length(alpha_vec)
plot(tree)
x0
mat
include("testJulia3.jl")
exit()
u ={2.1, 1.5]
u=[2.1, 1.5]
sqrt(u)
.sqrt(u)
\alpha = 1
?
include("testJulia3.jl")
import Pkg; Pkg.add("matplotlib")
exit()
import Pkg; Pkg.add("matplotlib")
include("testJulia3.jl")
include("testJulia3.jl")
exit()
include("testJulia3.jl")
include("testJulia3.jl")
exit()
plot(tree)
plot(tree)
tree
using Pkg
Pkg.add("KissABC.jl")
using Pkg
Pkg.add("KissABC")
exit()
include("testJulia3.jl")
import Pkg; Pkg.add("KissABC")
include("testJulia3.jl")
include("testJulia3.jl")
exit()
ones(5)
1
xo
x0
1-x0
ones(4) - x0
ones(4)' - x0
ones(4) - x0'
ones(4)
x0
length(x0)
ones(length(x0))
mat
x0
eye(5)
I(5)
?"Identity"
u\
 x0
x0
ones(4)
ones(4) - x0
exit()
testbranches
length(testbranches)
testbranches
last(mat)
mat
textbranches[1]
testbranches[1]
tbr <- first(testbranches)
nodes = getnoeds(test)
nodes = getnodes(test)
nodes
gettips(test)
collect(nodeiter(test))
test2 = collect(nodeiter(test))
test2
length(test2)
test2[1].u
test2.data
test2[1].data
test2.data["1"].u
testbranches[1].data["1"].u
testbranches[1].data
testbranches[1].data.u
testbranches[1].data[1]
testbranches[1].data[1, 2]
nodenamefilter(test)
nodenamefilter(istip, test)
nodenamefilter(isroot, test)
test
collect(testbranches)
collect(testbranches)[1]
plot(tree)
tree
tree.names
collect(testbranches)[1]
getleafnames(test)
getlength(test)
getlength(tree)
collect(getnodes(test), isleaf)
nodefilter(test, isleaf)
nodefilter(isleaf, test)
collect(nodefilter(isleaf, test))
test3 = collect(nodefilter(isleaf, test))
test3 = collect(nodefilter(isleaf, test));
dim(test3)
dims(test3)
test3
test3[1]
length(test3[1])
test3[1]
testbranches = getbranches(test)
testbranches = getbranches(test);
nodefilter(test)
nodefilter(isleaf, test)
tst2 = nodefilter(isleaf, test);
tst2[1]
tst2 = collect(nodefilter(isleaf, test));
tst[1]
tst2[1]
testtips.data
testtips[1].data
tbr[1]
tbr[1].data
tbr[1].data["1"].u
last(tbr[1].data["1"].u)
tbr[1].data["1"].u[4]
tbr[1].data["1"].u[4,]
tbr[1].data["1"].u
tbr[1].data["1"].t
tbr[3].data["1"].t
tbr[3].data["1"].u
tbr[3].data["1"].u[3]
tbr[5].data["1"].u[3]
last(tbr[5].data["1"].u, 1)
testtips[1]
testtips[1].branch
testtips[1].incoming
fields(testtips[1])
fieldnames(testtips[1])
fieldnames(test)
fieldnames(tbr[1])
typeof(testtips[1])
testtips[1].branch
fieldnames(typeof(testtips[1]))
testtips[1].inbound
testtips[1].inbound.u
testtips[1].inbound
testtips[1].inbound.data
testtips[1].inbound.data["1"].u
testtips[1].inbound.data["1"].u
res
a = Vector(Float64, 3)
a = Vector{Float64, 3}
a = Vector{Float64}
a[1] = .39587
a
a[]
myvec = a[1:10]
res[1]
res[1:3] = [.3534 .35454 .354]
C = Array{Float64}[] 
C = Array{Float64, 4}[] 
C[1] = [239874 23487 34587987]
C[1] = [239874, 23487, 34587987]
C = Array{Float64, undef, 0, 0}
C = Array{Float64}(undef, 0, 0}
C = Array{Float64}(undef, 0, 0)
C = Array{Float64}(undef, 15, 1)
C[1] = [234 432 213 123]
C = Array{Matrix{Float64}}}(undef, 15, 1)
C = Array{Matrix{Float64}}(undef, 15, 1)
C[1] = [243 24 25 123]
C
length(testtips)
length(res)
length(res)
res[1]
res[1,1]
typof(res)
typeof(res)
C = Array{Matrix{Float64}}(undef, 15, 1)
C[1]
C[1,1]
C(1,1)
C[1]
C[,1]
C[:1]
C = Array{Matrix{Float64}}[undef, 15, 1]
C = Array{Matrix{Float64}}(undef, 15, 1)
C[1] = .4
C[1] = [.3 .4]
C[2] = [.3 .4]
C[2] = [.3 .4, .3]
C[2] = [.3 .4 .3]
C
length(testtips)
finaltraitvals
finaltraitvals'
as.matrix(final.traitvals)
[finaltraitvals]
typeof(finaltraitvals)
res
res
fieldnames(testtips[1])
fieldnames(testtips)
fieldnames(typeof(testtips))
fieldnames(typeof(testbranches))
testbranches.x
test.branches.x[3]
test.branches[3].x
fieldnames(typeof(testbranches))
testbranches.x
testbranches.x[1]
[100]
testbranches.x[100]
testbranches.x[394]
fieldnames(typeof(testtips))
fieldnames(typeof(testtips[1]))
testtips[1].name
res
tipnames
tipnames[1] = "i"
tipnames
tipnames
Array()
vcat(res, tipnames)
hcat(res, tipnames)
endtraits["tip 1"]
mydict
tipnames
res
mydict
mydict["tip 4"]
tipnames[4]
res[4]
res
 testtips[1].inbound.data["1"].t[end]
 testtips[1].inbound.data["1"].t[end]
finaltipnames
finaltraitvals
finaltraitvals
finaltraitvals
finaltraitvals
testtips[1].height
fieldnames(typeof(testtips[1]))
testtips[1].inbound.data["1"].t[end]
 testtips[i].inbound.data["1"].t[end]
 testtips[1].inbound.data["1"].t[end]
i = 1
 testtips[1].inbound.data["1"].t[end]
typeof(tiptimes)
typeof(testtips[i].inbound.data["1"].t[end])
finaltraitvals
tiptimes
tiptimesdict
tiptimesdict[1]
exit()
