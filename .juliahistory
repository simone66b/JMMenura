node
fieldnames(typeof(node))
node.inbound
node.inbound.inout[1]
node.inbound.inout
node
node = getroot(tree)
putp!(tree)
putp!(tree)
putp!(tree, p, "parameters")
getnodes(tree)[1].data["parameters"]
getnodes(tree)[1].data["matrix"]
ismissing(node.inbound)
node.data["matrix"]
node.inbound
plot(tree)
node = getnodes(tree)[2]
node = getnodes(tree)[3]
node = getnodes(tree)[2]
node.other[2].length
))
node.data
node.data
node.data["matrix"].left
node.data["matrix"].right
end
menuramat!(tree)
getnodes(tree)
getnodes(tree)[1].data
getnodes(tree)[2].data
getnodes(tree)[3].data
getnodes(tree)[4].data
getnodes(tree)[5].data
getnodes(tree)[6].data
getnodes(tree)[7].data
getnodes(tree)[8].data
getnodes(tree)[9].data
getnodes(tree)[10].data
getnodes(tree)[9].inout
menuramat!(tree)
isleaf(node)
isleaf(tree, node)
menuramat!(tree)
getnodes(tree)[1].data
getnodes(tree)[2].data
getnodes(tree)[3].data
node.other[1].inout
tree = rand(tr)
node = getnodes(tree)[1]
node.data
node = getnodes(tree)[2]
node.data
menuramat!(tree)
node.other
node.other[1]
node.other[1].inout
node = getnodes(tree)[8]
isleaf(tree, node.other[i].inout[2])
isleaf(tree, node.other[1].inout[2])
node.other
node.other.inout
node.other.inout
node.other
fieldnames(typeof(node.other))
node.other
i=1
node.other
node.other
node.data
node
menuramat!(tree)
getnodes(tree)[1].data
getnodes(tree)[2].data
menuramat!(tree)
node = getroot(tree)
end
Recurse!(tree, node)
getnodes(tree)[2].data
getnodes(tree)[1].data
getnodes(tree)[2].data
getnodes(tree)[3].data
getnodes(tree)[4].data
getnodes(tree)[5].data
getnodes(tree)[6].data
getnodes(tree)[7].data
getnodes(tree)[8].data
getnodes(tree)[9].data
node
menuramat!(tree)
getnodes(tree)[1].data
getnodes(tree)[2].data
node
node.data
node.outbound
node.inout
fieldnames(typeof(node))
node.other
node.other.data
fieldnames(typeof(node.other))
node.other.length
node.length
node
node.outbound
fieldnames(typeof(node))
node.other[1].length
node.inbound
 node2 = getnodes(tree)[2]
node2.data
(node2.inbound.inout[1].data["matrix"].left
)
node2.inbound.inout[1].data["matrix"].left
node2.inbound.inout[1].data["matrix"].right
node2.inbound.inout[2].data["matrix"].right
 gen_cov_mat(node2.inbound.inout[1].data["matrix"].left, node2.data["parameters"], 
                                                      (getheight(tree, node2), getheight(tree, node2) +
                                                          node2.other[1].length))
node = getroot(tree)
plot(tr)
plot(tree)
getnodes(tree)
getnodes(tree)[1]
getbranches(tree)
node = getnodes(tree)[1]
node
node.data
Recurse!(tree)
Recurse!(tree)
Recurse!(tree, node)
node
getnodes(tree)[1].data
getnodes(tree)[2].data
getnodes(tree)[3].data
getnodes(tree)[4].data
getnodes(tree)[5].data
getnodes(tree)[6].data
node.other
node.other[1].inout
getnodes(tree)
 LinkNode tip 4, a tip of the tree with an incoming connection (branch 8).
node.name
node.inout
fieldnames(typeof(node))
node.other
getancestor(node)
getancestors(node)
getancestors(tree, node)
getancestors(tree, 2)
getancestors(tree)
getancestors(tree, "Node 6")
node
getnodes(tree)
node.inbound
getnodes(tree)
node = getnodes(tree)[2]
node.inbound
node.inbound.inout
node.other
root = getroot(tree)
root.data
node = root
node.data
root.data
getnodes(tree)
node = getnodes(tree)[2]
node.inbound.inout[2]
node.inbound.inout
)
))
))))
"
"
)
node.data
menuramat!(tree)
nodes = getnodes(tree)
nodes[1].data
nodes[2].data
nodes[3].data
nodes[4].data
nodes[5].data
nodes[6].data
node.other
node.other[1].inout
node.other
node
node.other
nod.other[1].inout
node.other[1].inout
Recurse(tree, getroot(tree))
Recurse!(tree, getroot(tree))
Recurse!(tree, getroot(tree))
Recurse!(tree, getroot(tree))
tree
getnodes(tree)[1].data
getnodes(tree)[2].data
getnodes(tree)[3].data
getnodes(tree)[4].data
getnodes(tree)[5].data
getnodes(tree)[6].data
getnodes(tree)[7].data
getnodes(tree)[8].data
getnodes(tree)[7].data
node.inbound.inout[1].data["matrix"]
node.inbound.inout[2].data["matrix"]
node.inbound.inout
node.name
node.inbound.inout[1]
node.inbound.inout[1].name
node.inbound.inout[1].data["matrix"]
getheight(tree, node)
node.other
getheight(tree, node)
node.name
ancestor(tree, node)
ancestors(tree, node)
getancestors(tree, node)
ancestor
ancestor.data
ancestor[1].data
node.data
ancestor.data
getdaughters(tree, node)
daughters(tree, node)
Recurse!(tree, root)
getnodes(tree)[8].data
getnodes(tree)[6].data
getnodes(tree)[5].data
getnodes(tree)[2].data
getnodes(tree)[1].data
getnodes(tree)[3].data
getnodes(tree)[4].data
getnodes(tree)[5].data
node = getnodes(tree)[2]
node.data
end
node = getnodes(tree)[3]
node = getnodes(tree)[5]
node.data
Recurse!(tree, root)
node.data
getnodes(tree)[1].data
getnodes(tree)[2].data
getnodes(tree)[3].data
getnodes(tree)[4].data
getnodes(tree)[5].data
getnodes(tree)[6].data
getnodes(tree)[6]
Recurse!(tree, root)
node
isleaf(node)
?istip
?isleaf
Recurse!(tree, root)
nodes = getnodes(tree)
nodes[1].data
nodes[2].data
nodes[3].data
nodes[4].data
nodes[5].data
nodes[6].data
nodes[7].data
nodes[8].data
Recurse!(tree, root)
nodes[1].data
nodes[1].data
2
nodes[2].data
nodes
nodes..data
for i in 1:length nodes
nodes[i
].data
end
for i in 1:length(nodes)
nodes[i].data end
for i in 1:length(nodes)
print(nodes[i].data) end
print(nodes[i].data["matrix"]) end
for i in 1:length(nodes)
print(nodes[i].data["matrix"]) end
menuramat!(tree)
nodes = getnodes(tree)
for i in 1:length(nodes)
print(nodes[i].data["matrix"]) end
nodes
nodes[4].data["matrix"]
nodes[6].data["matrix"]
eigen(nodes[6].data["matrix"])
nodes = getnodes(tree)
for i in 1:length(nodes)
print(nodes[i].data["matrix"]) end
menuramat!(tree)
nodes = getnodes(tree)
for i in 1:length(nodes)
print(nodes[i].data["matrix"]) end
menuramat!(tree)
getnodes(tree)
node = getnodes(tree)[17]
node.data["matrix"]
eigne(node.data["matrix"])
eigen(node.data["matrix"])
p.mat
menuramat!(tree)
node = getnodes(tree)[17]
node.data["matrix"]
eigen(node.data["matrix"])
menura!(tree)
menura!(tree)
menura!(tree)
node = getnodes(tree)[17]
node.data
menura!(tree)
node = getnodes(tree)[17]
node.data
menuramat!(tree)
node = getnodes(tree)[17]
node.data
node = getnodes(tree)[17]
node.data
menuramat!(tree)
node = getnodes(tree)[17]
node.data
menuramat!(tree)
node = getnodes(tree)[17]
node.data
node = getnodes(tree)[18]
node.data
eigen(node.data["matrix"])
menuramat!(tree)
node = getnodes(tree)[18]
eigen(node.data["matrix"])
node.data
menuramat!(tree)
node = getnodes(tree)[18]
node.data
menuramat!(tree)
node = getnodes(tree)[18]
node.data
eigen(node.data["matrix"])
node
menuramat!(tree)
node = getnodes(tree)[18]
node.data
menuramat!(tree)
node = getnodes(tree)[18]
node.data
eigen(node.data["matrix"])
menuramat!(tree)
node = getnodes(tree)[18]
node.data
eigen(node.data["matrix"])
node
node.other
node=getroot(tree)
node.data
menuramat!(tree)
putp!(tree, p)
tree
getnodes(tree)[6].data
gen_cov_mat(root.data["matrix"])
gen_cov_mat(root.data["matrix"], p, (0.0, 1.0))
gen_cov_mat(root.data["matrix"], p, (0.0, 1.0))
gen_cov_mat(root.data["matrix"], p, (0.0, 1.0))
eigen(gen_cov_mat(root.data["matrix"], p, (0.0, 1.0)))
eigen(gen_cov_mat(root.data["matrix"], p, (0.0, 1.0)))
eigen(gen_cov_mat(root.data["matrix"], p, (0.0, 1.0)))
menuramat!(tree)
node
node.other
node.other[1]
node.other[1].inout
x0
t0 = 0
node=root
t0 = 0.0
plot(tree)
root.data
node = getnodes(tree)[3]
putp!(tree, p)
p
node = getroot(tree)
node = getnodes(tree)[3]
root
node = getnodes(tree)[4]
node = getnodes(tree)[2]
node.inbound
plot(tree)
node = getnodes(tree)[getnodes(tree).name == "Node 6"]
getnodes(tree)
node = getnodes(tree)[2]
getancestors(node)
getancestors(tree, node)
ancestor["trace"].left[end]
ancest)
menura(tree, root)
menura!(tree)
node = getnodes(tree)[2]
node.data
menura!(tree)
menura!(tree)
getnodes(tree)
node = getnodes(tree)[4]
node.data
)
getnodes(tree)
node = getnodes(tree)[2]
node.data
getleaves(tree)
node
node.data
i = 1
res[i]
tiptimes
p
mat = p.mat
u0=zeros(size(mat))
dt = 0.001
gen_cov_mat(mat, p)
gen_cov_mat(mat, p, tspan)
gen_cov_mat(mat, p, tspan)
p
p
p.A
last
previous
root
tree
pp
exit()
gen_cov_mat(mat, p1, (0.0, 1.0))
gen_cov_mat(P0, p1, tspan)
gen_cov_mat(P0, p1, tspan)
gen_cov_mat(P0, p1, tspan)
gen_cov_mat(P0, p1, tspan)
gen_cov_mat(P0, p1, tspan)
gen_cov_mat(P0, p1, tspan)
gen_cov_mat(P0, p1, tspan)
eigen(gen_cov_mat(P0, p1, tspan))
p1
p = p1
mat = P0
exit()
simulation
p1
tree
simulated[2]
exampledat[2]
simulated[2]
exampledat
node = getnodes(tree)[3]
node.other
node.other[1].inout[2]
node.other[2].inout[2]
cor(P0)
node.data["matrix"]
cor(node.data["matrix"]
)
cor(P0)
node = getroot(tree)
t0 = 0.0
node = getnodes(tree)[3]
ancestor
ancestor.data
ancestor.data["trace"]
node.data["trace"]
node.data["trace"][end]
(getheight(tree, ancestor), getheight(tree, node))
 (getheight(tree, ancestor), getheight(tree, node))
node
ancestor.data["matrix"]
node
ancestor.data["matrix"]
menuramat!(tree)
node = getnodes(tree)[3]
ancestor=getancestors(tree)[1]
ancestor=getancestor(tree, node)[1]
ancestor=getancestors(tree, node)[1]
ancestor.data["matrix"]
menuramat!(tree)
node = getnodes(tree)[3]
ancestor=getancestors(tree, node)[1]
ancestor.data["matrix"]
node.data["matrix"]
node .= ancestor
node =. ancestor
node
ancestor
node = getroot(tree)
node = getnodes(tree)[3]
ancestor=getancestors(tree, node)[1]
evol.u
evol.t
menura!(tree)
Sampling   0%|                      |  ETA: N/ASampling   0%|▏                     |  ETA: 0:08:06Sampling   1%|▎                     |  ETA: 0:08:38Sampling   1%|▍                     |  ETA: 0:08:21Sampling   2%|▍                     |  ETA: 0:08:49Sampling   2%|▌                     |  ETA: 0:08:49Sampling   3%|▋                     |  ETA: 0:08:48Sampling   3%|▊                     |  ETA: 0:08:49Sampling   4%|▉                     |  ETA: 0:08:53Sampling   4%|█                     |  ETA: 0:09:01Sampling   5%|█                     |  ETA: 0:09:02Sampling   5%|█▏                    |  ETA: 0:09:02Sampling   6%|█▎                    |  ETA: 0:09:01Sampling   6%|█▍                    |  ETA: 0:09:12
i = testbranches[1]
length(u1)
u1
source("testJulia4.jl")
import("testJulia4.jl")
exit()
