using DifferentialEquations, LinearAlgebra, ExponentialUtilities, Plots,
    Statistics; pyplot();


## P_0: Classic Fisher's Iris data 
iris =  [0.6856935  -0.0424340    1.2743154   0.5162707;
         -0.0424340   0.1899794   -0.3296564  -0.1216394;
         1.2743154  -0.3296564    3.1162779   1.2956094;
         0.5162707  -0.1216394    1.2956094   0.5810063];

G = [0 -1; 1 0]

iris = iris[1:2, 1:2]
A=G

A =  [0  0.0424340    -1.2743154   -0.5162707;
         -0.0424340   0   0.3296564  0.1216394;
         1.2743154  -0.3296564    0   -1.2956094;
         0.5162707  -0.1216394    1.2956094   0];

# random 4 species tree
# iris = [0.9430807 0.7629985 0.0000000 0.0000000;
#         0.7629985 0.7970319 0.0000000 0.0000000;
#         0.0000000 0.0000000 0.8625245 0.7964239;
#         0.0000000 0.0000000 0.7964239 1.5592400]

eigen(iris).values ## eigenvalues

# 4-element Vector{Float64}:
#  0.023835136854432327
#  0.07820947720632193
#  0.24267075551194206
#  4.2282417304273014


p=(A=A, B=A)
    function drift(du, u, p, t) ## drift function for the SDE
        A= p.A
        du = A * t ## a = 1.0 for example
    end # drift

function diffusion(du, u, p, t) ## diffusion function for the SDE
    B = p.B
    du =  B * t ## diffusion function b= 2.0 for example
end

## Question: Should A and B be the same? In what situation would they differ?

time_tot = 1.0;
tspan = (0.0, time_tot);

## u0 = Omega_0
u0 = [0 0 0 0;
      0 0 0 0;
      0 0 0 0;
      0 0 0 0];

u0 = [0 0; 0 0];
## u0 = iris

prob = SDEProblem(drift, diffusion, u0, tspan, p=p); ## setup SDE problem

sol = solve(prob, EM(), p=p, dt=0.001); ## Solve using E-M scheme

Omega1 = last(sol.u); ## get the final matrix
Omega2 = last(sol.u); ## get another copy

First = exponential!(Omega1); ## matrix exponential
Second = exponential!(-Omega2); ## matrix exponential

result = First * iris * Second; ## reconstruct P_1
eigen(result).values
eigen(iris).values

## all real, positive eigenvalues. Question: Should they be the same as
## the eigenvalues for the Iris data, above?
# 4-element Vector{Float64}:
#  0.001734426085353237
#  0.033422338525720664
#  0.12968476440361526
#  3.3628691488389415

cor(iris)
cor(result)
